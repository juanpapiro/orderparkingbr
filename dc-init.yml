services:
  svr1:
    image: mongo:latest
    container_name: svr1
    depends_on:
      - svr2
      - svr3
    command: mongod --configsvr --replSet cfgrsvr --port 27017 --dbpath /data/db --bind_ip_all --quiet
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'cfgrsvr',members:[{_id:0,host:'svr1:27017'},{_id:1,host:'svr2:27017'},{_id:2,host:'svr3:27017'}]}) }" | mongosh --port 27017
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    ports:
      - 10001:27017
    volumes:
      - svr1:/data/db
    networks:
      - mongonetwork

  svr2:
    image: mongo:latest
    container_name: svr2
    command: mongod --configsvr --replSet cfgrsvr --port 27017 --dbpath /data/db --bind_ip_all --quiet
    ports:
      - 10002:27017
    volumes:
      - svr2:/data/db
    networks:
      - mongonetwork

  svr3:
    image: mongo:latest
    container_name: svr3
    command: mongod --configsvr --replSet cfgrsvr --port 27017 --dbpath /data/db --bind_ip_all --quiet
    ports:
      - 10003:27017
    volumes:
      - svr3:/data/db
    networks:
      - mongonetwork

  srd1:
    image: mongo:latest
    container_name: srd1
    depends_on:
      - svr1
      - svr2
      - svr3
    command: mongod --shardsvr --port 27017 --replSet cfgsrd1 --dbpath /data/db --bind_ip_all --quiet
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'cfgsrd1',members:[{_id:0,host:'srd1:27017'}]}) }" | mongosh --port 27017
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    ports:
      - 11001:27017
    volumes:
      - srd1:/data/db
    networks:
      - mongonetwork

  srd2:
    image: mongo:latest
    container_name: srd2
    depends_on:
      - svr1
      - svr2
      - svr3
    command: mongod --shardsvr --port 27017 --replSet cfgsrd2 --dbpath /data/db --bind_ip_all --quiet
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'cfgsrd2',members:[{_id:0,host:'srd2:27017'}]}) }" | mongosh --port 27017
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    ports:
      - 11002:27017
    volumes:
      - srd2:/data/db
    networks:
      - mongonetwork

  srd3:
    image: mongo:latest
    container_name: srd3
    depends_on:
      - svr1
      - svr2
      - svr3
    command: mongod --shardsvr --port 27017 --replSet cfgsrd3 --dbpath /data/db --bind_ip_all --quiet
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'cfgsrd3',members:[{_id:0,host:'srd3:27017'}]}) }" | mongosh --port 27017
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    ports:
      - 11003:27017
    volumes:
      - srd3:/data/db
    networks:
      - mongonetwork


  routerdb:
    image: mongo:latest
    container_name: routerdb
    depends_on:
      - svr1
      - svr2
      - svr3
      - srd1
      - srd2
      - srd3
    command: mongos --configdb cfgrsvr/svr1:27017,svr2:27017,svr3:27017 --port 27017 --bind_ip_all --quiet #--bind_ip 0.0.0.0 #--bind_ip_all #--bind_ip_all
    ports:
      - 12001:27017
    volumes:
      - routerdb:/data/configdb
    networks:
      - mongonetwork
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { sh.status() } catch (err) { sh.addShard("cfgsrd1/srd1:27017")sh.addShard("cfgsrd2/srd2:27017")sh.addShard("cfgsrd3/srd3:27017")sh.enableSharding("parking") }" | mongosh --port 27017
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30



  apporderparking:
    container_name: app-orderparkingbr
    image: juanpapiro/orderparkingbr:latest
    depends_on:
      - svr1
      - svr2
      - svr3
      - srd1
      - srd2
      - srd3
      - routerdb
    environment:
      - spring.data.mongodb.uri=mongodb://host.docker.internal:12001/parking
      - URL_PARKINGMETER=http://host.docker.internal:8001/parkingmeter
    ports:
      - "8002:8002"
    networks:
      - appnetwork
    extra_hosts:
      - "host.docker.internal:host-gateway"
    links:
      - routerdb
 



networks:
  mongonetwork:
    driver: bridge
  appnetwork:
    name: parkingnetwork
    driver: bridge
    external: true

volumes:
  svr1:
  svr2:
  svr3:
  srd1:
  srd2:
  srd3:
  routerdb: